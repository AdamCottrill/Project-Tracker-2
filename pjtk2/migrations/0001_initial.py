# Generated by Django 2.2.11 on 2020-06-02 16:32

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.indexes
import django.contrib.postgres.search
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import pjtk2.models
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('common', '0006_auto_20200601_0705'),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Database',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('master_database', models.CharField(max_length=250)),
                ('path', models.CharField(max_length=250)),
            ],
            options={
                'verbose_name': 'Master Database',
            },
        ),
        migrations.CreateModel(
            name='Family',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name_plural': 'Families',
            },
        ),
        migrations.CreateModel(
            name='FundingSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
                ('abbrev', models.CharField(max_length=25, unique=True)),
            ],
            options={
                'verbose_name': 'Funding Source',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('msgtxt', models.CharField(max_length=100)),
                ('level', models.CharField(choices=[('info', 'Info'), ('actionrequired', 'Action Required')], default='info', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Milestone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(db_index=True, max_length=50, unique=True)),
                ('label_abbrev', models.CharField(max_length=50, unique=True)),
                ('category', models.CharField(choices=[('Core', 'core'), ('Suggested', 'suggested'), ('Custom', 'custom')], default='Custom', max_length=30)),
                ('report', models.BooleanField(db_index=True, default=False)),
                ('shared', models.BooleanField(default=False)),
                ('protected', models.BooleanField(default=False)),
                ('order', models.FloatField(default=99)),
            ],
            options={
                'ordering': ['-report', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('submitted', 'Submitted'), ('ongoing', 'Ongoing'), ('complete', 'Complete'), ('canceled', 'Canceled')], db_index=True, default='submitted', max_length=10)),
                ('active', models.BooleanField(default=True)),
                ('cancelled', models.BooleanField(default=False)),
                ('year', models.CharField(blank=True, db_index=True, editable=False, max_length=4, verbose_name='Year')),
                ('prj_date0', models.DateField(db_index=True, verbose_name='Start Date')),
                ('prj_date1', models.DateField(db_index=True, verbose_name='End Date')),
                ('prj_cd', models.CharField(max_length=12, unique=True, verbose_name='Project Code')),
                ('prj_nm', models.CharField(max_length=60, verbose_name='Project Name')),
                ('abstract', models.TextField(help_text='Project Abstract (public).')),
                ('abstract_html', models.TextField(blank=True, help_text='Project Abstract (public).', null=True)),
                ('comment', models.TextField(blank=True, help_text='Comments or Remarks (internal)', null=True)),
                ('comment_html', models.TextField(blank=True, help_text='Comments or Remarks (internal)', null=True)),
                ('risk', models.TextField(blank=True, help_text='Potential risks associated with not running project.', null=True, verbose_name='Risk')),
                ('risk_html', models.TextField(blank=True, help_text='Potential risks associated with not running project.', null=True, verbose_name='Risk')),
                ('content_search', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('slug', models.SlugField(blank=True, editable=False)),
                ('cancelled_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='CancelledBy', to=settings.AUTH_USER_MODEL)),
                ('dba', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='ProjectDBA', to=settings.AUTH_USER_MODEL)),
                ('field_ldr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='FieldLead', to=settings.AUTH_USER_MODEL)),
                ('lake', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='common.Lake')),
                ('master_database', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pjtk2.Database')),
                ('owner', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='ProjectOwner', to=settings.AUTH_USER_MODEL)),
                ('prj_ldr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ProjectLead', to=settings.AUTH_USER_MODEL)),
                ('project_team', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-prj_date1'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ProjectMilestones',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('required', models.BooleanField(db_index=True, default=True)),
                ('completed', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('milestone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projectmilestones', to='pjtk2.Milestone')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projectmilestones', to='pjtk2.Project')),
            ],
            options={
                'verbose_name_plural': 'Project Milestones',
            },
        ),
        migrations.CreateModel(
            name='ProjectType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_type', models.CharField(max_length=150, unique=True)),
                ('field_component', models.BooleanField(default=True)),
                ('scope', models.CharField(choices=[('MS', 'Multiple Sources'), ('FI', 'Fishery Independent'), ('FD', 'Fishery Dependent')], default='FI', max_length=30)),
            ],
            options={
                'verbose_name': 'Project Type',
            },
        ),
        migrations.CreateModel(
            name='SamplePoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(blank=True, max_length=60, null=True)),
                ('geom', django.contrib.gis.db.models.fields.PointField(help_text='Represented as (longitude, latitude)', srid=4326)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pjtk2.Project')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current', models.BooleanField(default=True)),
                ('report_path', models.FileField(max_length=200, upload_to='milestone_reports/')),
                ('uploaded_on', models.DateTimeField(auto_now_add=True)),
                ('report_hash', models.CharField(max_length=300)),
                ('projectreport', models.ManyToManyField(to='pjtk2.ProjectMilestones')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectSisters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('family', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pjtk2.Family')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pjtk2.Project')),
            ],
            options={
                'verbose_name_plural': 'Project Sisters',
                'ordering': ['family', 'project'],
            },
        ),
        migrations.CreateModel(
            name='ProjectProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protocol', models.CharField(max_length=150)),
                ('abbrev', models.CharField(max_length=10, unique=True)),
                ('deprecated', models.DateField(blank=True, null=True)),
                ('project_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='protocols', to='pjtk2.ProjectType')),
            ],
            options={
                'verbose_name': 'Project Protocol',
            },
        ),
        migrations.CreateModel(
            name='ProjectPolygon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.PolygonField(srid=4326)),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='convex_hull', to='pjtk2.Project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectMultiPoints',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.MultiPointField(srid=4326)),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='multipoints', to='pjtk2.Project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0, verbose_name='the order that the images are presented')),
                ('image_path', models.ImageField(upload_to=pjtk2.models.ProjectImage.get_image_path)),
                ('caption', models.CharField(max_length=1000, verbose_name='figure caption')),
                ('report', models.BooleanField(default=True, verbose_name='should this image be included in the annual report too?')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='pjtk2.Project')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ProjectFunding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('odoe', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=8, null=True, verbose_name='ODOE')),
                ('salary', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=8, null=True, verbose_name='Salary')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='funding_sources', to='pjtk2.Project')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_allocations', to='pjtk2.FundingSource')),
            ],
            options={
                'verbose_name': 'Project Funding Source',
            },
        ),
        migrations.AddField(
            model_name='project',
            name='project_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pjtk2.ProjectType'),
        ),
        migrations.AddField(
            model_name='project',
            name='protocol',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Projects', to='pjtk2.ProjectProtocol'),
        ),
        migrations.AddField(
            model_name='project',
            name='signoff_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='SignOffBy', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='Messages2Users',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('read', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pjtk2.Message')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Messages2Users',
            },
        ),
        migrations.AddField(
            model_name='message',
            name='distribution_list',
            field=models.ManyToManyField(through='pjtk2.Messages2Users', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='message',
            name='project_milestone',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pjtk2.ProjectMilestones'),
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(max_length=60)),
                ('role', models.CharField(choices=[('dba', 'DBA'), ('manager', 'Manager'), ('employee', 'Employee')], db_index=True, default='Employee', max_length=30)),
                ('lake', models.ManyToManyField(to='common.Lake')),
                ('supervisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pjtk2.Employee')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='employee', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['user__username'],
            },
        ),
        migrations.CreateModel(
            name='Bookmark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pjtk2.Project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_bookmark', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='AssociatedFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_path', models.FileField(max_length=200, upload_to=pjtk2.models.AssociatedFile.get_associated_file_upload_path)),
                ('current', models.BooleanField(default=True)),
                ('uploaded_on', models.DateTimeField(auto_now_add=True)),
                ('hash', models.CharField(max_length=300)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pjtk2.Project')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='samplepoint',
            index=models.Index(fields=['project', 'geom'], name='pjtk2_sampl_project_9b5b67_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='projectmilestones',
            unique_together={('project', 'milestone')},
        ),
        migrations.AlterUniqueTogether(
            name='projectfunding',
            unique_together={('project', 'source')},
        ),
        migrations.AddIndex(
            model_name='project',
            index=django.contrib.postgres.indexes.GinIndex(fields=['content_search'], name='pjtk2_proje_content_188c26_gin'),
        ),
        migrations.AlterUniqueTogether(
            name='messages2users',
            unique_together={('user', 'message')},
        ),
        migrations.AddConstraint(
            model_name='bookmark',
            constraint=models.UniqueConstraint(fields=('project', 'user'), name='unique_user_project_bookmark'),
        ),
    ]
